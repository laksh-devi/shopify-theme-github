{% comment %} <style>
  .custom-filter-section {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }
  .filter-btn{
    /* display:none; */
  }
  .filter-btn {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    background: #F3F2F2;
    padding: 10px 20px;
    border-radius: 5px;
  }

  .filter-btn p {
    margin: 0;
  }

  .filter-btn span {
    transition: transform 0.3s;
  }

  .filter-btn.active span {
    transform: rotate(45deg);
  }
  .filter-section{
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 20px;
}
  

  /* .filter-section {
    display: none;
    margin-top: 10px;
    background: #fff;
    border: 1px solid #ccc;
    border-radius: 5px;
    padding: 15px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  } */

  .filter {
    margin-bottom: 15px;
    width:100%;
  }

  .custom-filter {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .custom-filter a {
    text-decoration: none;
    color: #333;
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    transition: background 0.3s;
    cursor: pointer;
  }

  .custom-filter a:hover {
    background: #f0f0f0;
  }

  .dropdown {
    position: relative;
    display: inline-block;
    width: 100%;
  }

  .dropdown-content {
    display: none;
    position: absolute;
    background: #fff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    z-index: 1;
    width: 100%;
    max-height: 200px;
    overflow-y: auto;
  }

  .dropdown-content a {
    display: block;
    padding: 10px;
    color: #333;
    transition: background 0.3s;
  }

  .dropdown-content a:hover {
    background: #f4f4f4;
  }

  .dropdown.active .dropdown-content {
    display: flex;
    flex-direction:column;
    padding: 16px;
    overflow-y: scroll;
    min-height:100px;
    border: 1px solid #ccc;
    border-radius: 8px;
  }
  .dropdown.active .dropdown-content span{
    cursor:pointer;
    color:#000;
    font-size:14px;
  }
  /* .filter-btn{
      display:none;
    } */
  @media screen and (max-width:768px){
    .filter-btn{
      display:block;
    }
  }
</style>

<div class="custom-filter-section page-width">
  <div class="filter-btn" onclick="toggleFilter()">
    <p>Filter</p>
    <span>
      <svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="plus" class="svg-inline--fa fa-plus" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
        <path fill="currentColor" d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32v144H48c-17.7 0-32 14.3-32 32s14.3 32 32 32h144v144c0 17.7 14.3 32 32 32s32-14.3 32-32V256h144c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z"></path>
      </svg>
    </span>
  </div>

  <div class="filter-section">
    
    <!-- Brand Filter -->
    <div class="filter">
      <div class="dropdown" onclick="toggleDropdown(this)">
        <div class="filter-btn">Brand 
          <span>
            <svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="angle-down" class="svg-inline--fa fa-angle-down " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z"></path></svg>
          </span>
        </div>
        <div class="dropdown-content">
          <span>Case</span>
          <span>Airmann</span>
          <span>Track</span>
          <span>Rubber</span>
        </div>
      </div>
    </div>

    <!-- Model Filter -->
    <div class="filter">
      <div class="dropdown" onclick="toggleDropdown(this)">
        <div class="filter-btn">Model 
           <span>
            <svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="angle-down" class="svg-inline--fa fa-angle-down " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z"></path></svg>
          </span>
        </div>
        <div class="dropdown-content">
          <span>Case</span>
          <span>Airmann</span>
          <span>Track</span>
          <span>Rubber</span>
        </div>
      </div>
    </div>

  </div>
</div>

<script>
  // Toggle entire filter section
function toggleFilter() {
  const filterSection = document.querySelector('.filter-section');
  const filterBtn = document.querySelector('.filter-btn');

  filterSection.style.display = filterSection.style.display === 'flex' ? 'none' : 'flex';
  filterBtn.classList.toggle('active');
}

// Toggle individual dropdowns
function toggleDropdown(element) {
  element.classList.toggle('active');
}

</script> {% endcomment %}

{% comment %}
  Shopify Collection Page with Filtering Using Metafields
{% endcomment %}
<style>
  .filter-section {
    display: flex;
    align-items: center;
    gap: 20px;
  }

  .filter-section .filter {
    background-color: #F3F2F2;
    padding: 13px 16px;
    cursor: pointer;
    position: relative;
  }

  .filter-section .custom-filter {
    background: #F3F2F2;
    border: none;
    width: 208px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-left: 15px;
  }

  .filter-section .custom-filter:focus-visible {
    outline: transparent !important;
    box-shadow: none;
  }

  .filter-btn {
    display: none;
  }

  .dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    background: #fff;
    border: 1px solid #ccc;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    z-index: 10;
    display: none;
    transition: all 0.3s ease;
  }

  .dropdown div {
    padding: 10px;
    transition: background 0.2s;
    cursor: pointer;
  }

  .dropdown div:hover {
    background: #f0f0f0;
  }

  .filter.active .dropdown {
    display: block;
  }

  @media screen and (max-width: 768px) {
    .filter-btn {
      display: flex !important;
      align-items: center;
      background-color: transparent !important;
      border: 1px solid #000;
      padding: 6px 12px;
      width: max-content !important;
      font-weight: 700;
      font-size: 14px;
      line-height: 19.07px;
      text-align: center;
      height: 2.5rem !important;
      border-radius: 20px;
    }

    .filter-btn p {
      color: #000;
      font-size: 14px;
      font-weight: 700;
    }

    .filter-section .filter {
      margin-top: 20px;
    }

    .filter-btn span {
      margin-left: 8px;
    }

    .filter-btn span svg {
      width: 13px;
      height: 16px;
      vertical-align: -.125em;
    }

    .filter-section .custom-filter {
      width: 100%;
    }

    .filter-section {
      display: none;
      transition: all 0.3s ease;
    }

    .filter-section.active {
      display: block;
    }
  }
</style>

<div class="custom-filter-section page-width">
  <div class="filter-btn" onclick="toggleFilterSection()">
    <p>Filter</p>
    <span>
      <svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="plus" class="svg-inline--fa fa-plus" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
        <path fill="currentColor" d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32v144H48c-17.7 0-32 14.3-32 32s14.3 32 32 32h144v144c0 17.7 14.3 32 32 32s32-14.3 32-32V256h144c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z"></path>
      </svg>
    </span>
  </div>

  <div class="filter-section">

    <!-- Brand Filter -->
    <div class="filter custom-filter" id="brand-filter" onclick="toggleDropdown(this)">
      <div class="filter-header">Brand</div>
      <div class="dropdown"></div>
    </div>

    <!-- Model Filter -->
    <div class="filter custom-filter" id="model-filter" onclick="toggleDropdown(this)">
      <div class="filter-header">Model</div>
      <div class="dropdown"></div>
    </div>

  </div>
</div>

<script>
  // Sample dynamic data (can be replaced with API data)
  const brandData = ['Case', 'Airmann', 'Track', 'Rubber'];
  const modelData = ['Model 1', 'Model 2', 'Model 3', 'Model 4'];

  // Function to generate dropdown options dynamically
  function populateDropdown(filterId, data) {
    const dropdown = document.querySelector(`#${filterId} .dropdown`);
    
    // Clear existing options
    dropdown.innerHTML = '';

    data.forEach(item => {
      const div = document.createElement('div');
      div.textContent = item;
      div.addEventListener('click', () => selectOption(filterId, item));
      dropdown.appendChild(div);
    });
  }

  // Toggle the entire filter section
  function toggleFilterSection() {
    const filterSection = document.querySelector('.filter-section');
    filterSection.classList.toggle('active');
  }

  // Toggle individual dropdowns
  function toggleDropdown(element) {
    const allFilters = document.querySelectorAll('.filter');

    allFilters.forEach(filter => {
      if (filter !== element) {
        filter.classList.remove('active');
      }
    });

    element.classList.toggle('active');
  }

  // Select option and update the header text
  function selectOption(filterId, value) {
    const filter = document.querySelector(`#${filterId}`);
    const header = filter.querySelector('.filter-header');

    header.textContent = value;
    filter.classList.remove('active');

    console.log(`Selected from ${filterId}: ${value}`);
  }

  // Close dropdowns when clicking outside
  window.addEventListener('click', (e) => {
    if (!e.target.closest('.filter')) {
      document.querySelectorAll('.filter').forEach(filter => {
        filter.classList.remove('active');
      });
    }
  });

  // Initialize dropdowns with dynamic data
  populateDropdown('brand-filter', brandData);
  populateDropdown('model-filter', modelData);
</script>






<!-- <script>


// // Run the script after DOM content is loaded
document.addEventListener('DOMContentLoaded', () => {
  // Initialize filter with URL params
  initializeFiltersFromURL();

  // Add event listeners for filter changes
  document.getElementById('brand-filter').addEventListener('change', () => {
    updateModelFilter();
    applyFiltersToURL();
  });

  document.getElementById('model-filter').addEventListener('change', () => {
    filterProducts();
    applyFiltersToURL();
  });

  // ✅ Populate model filter based on selected brand
  function updateModelFilter() {
    const brandFilter = document.getElementById('brand-filter').value;
    const modelFilter = document.getElementById('model-filter');
    const products = document.querySelectorAll('#product-grid .grid__item');

    // Clear previous model options
    modelFilter.innerHTML = '<option value="">Model</option>';

    const models = new Set();

    // Collect models for the selected brand
    products.forEach(product => {
      const productBrand = product.getAttribute('data-brand');
      const productModel = product.getAttribute('data-model');

      if (!brandFilter || productBrand === brandFilter) {
        models.add(productModel);
      }
    });

    // Populate model dropdown
    models.forEach(model => {
      const option = document.createElement('option');
      option.value = model;
      option.textContent = model;
      modelFilter.appendChild(option);
    });

    // Apply filters after updating the model dropdown
    filterProducts();
  }

  // 🐀񓠠Filter products based on brand and model
  function filterProducts() {
    const brandFilter = document.getElementById('brand-filter').value;
    const modelFilter = document.getElementById('model-filter').value;
    const products = document.querySelectorAll('#product-grid .grid__item');

    let visibleBrandCount = 0;
    let visibleProductCount = 0;

    products.forEach(product => {
      const productBrand = product.getAttribute('data-brand');
      const productModel = product.getAttribute('data-model');

      let show = true;

      if (brandFilter && productBrand !== brandFilter) {
        show = false;
      }
      if (modelFilter && productModel !== modelFilter) {
        show = false;
      }

      product.style.display = show ? 'block' : 'none';

      if (show) {
        visibleBrandCount++;
        if (productBrand === brandFilter || brandFilter === '') {
          visibleProductCount++;
        }
      }
    });

    console.log(`Visible brands: ${visibleBrandCount}`);
    console.log(`Products for selected brand: ${visibleProductCount}`);
  }

  // 🔥 Apply the filters as URL query parameters
  function applyFiltersToURL() {
    const brandFilter = document.getElementById('brand-filter').value;
    const modelFilter = document.getElementById('model-filter').value;

    const params = new URLSearchParams(window.location.search);

    if (brandFilter) {
      params.set('brand', brandFilter);
    } else {
      params.delete('brand');
    }

    if (modelFilter) {
      params.set('model', modelFilter);
    } else {
      params.delete('model');
    }

    const newUrl = `${window.location.pathname}?${params.toString()}`;
    window.history.pushState({}, '', newUrl);
  }

  // 🔥 Initialize filters based on URL params
  function initializeFiltersFromURL() {
    const params = new URLSearchParams(window.location.search);
    const brand = params.get('brand');
    const model = params.get('model');

    if (brand) {
      document.getElementById('brand-filter').value = brand;
    }

    updateModelFilter();

    if (model) {
      document.getElementById('model-filter').value = model;
    }

    filterProducts();
  }
});



</script> -->
